name: Build and Publish Rhino Plugin

on:
  release:
    types: [published]

jobs:
  release-build:
    runs-on: ubuntu-latest
    env:
      SOLUTION_PATH: ${{ github.workspace }}/rhino_mcp_plugin/rhinomcp.sln
      PROJECT_PATH: ${{ github.workspace }}/rhino_mcp_plugin/rhinomcp.csproj
      ARTIFACT_NAME: rhinomcp

    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Setup .NET
        uses: actions/setup-dotnet@v4
        with:
          dotnet-version: '7.0.x'

      - name: Restore NuGet packages
        run: |
          dotnet restore ${{ env.SOLUTION_PATH }}

      - name: Build solution with MSBuild
        run: |
          dotnet msbuild ${{ env.SOLUTION_PATH }} /p:Configuration=Release /p:Platform="Any CPU"

      - name: Prepare artifacts
        run: |
          mkdir -p dist/net7.0
          # Copy DLL, RHP, and any other necessary files to the dist folder
          cp ${{ github.workspace }}/rhino_mcp_plugin/bin/Release/net7.0/*.dll dist/net7.0/
          cp ${{ github.workspace }}/rhino_mcp_plugin/bin/Release/net7.0/*.rhp dist/net7.0/
          cp ${{ github.workspace }}/rhino_mcp_plugin/manifest.yml dist/

      - name: Upload build artifacts
        uses: actions/upload-artifact@v4
        with:
          name: ${{ env.ARTIFACT_NAME }}
          path: dist/

  publish:
    name: Publish to Yak and GitHub Release
    runs-on: ubuntu-latest
    needs:
      - release-build
    env:
      ARTIFACT_NAME: rhinomcp

    steps:
      - name: Download build artifacts
        uses: actions/download-artifact@v4
        with:
          name: ${{ env.ARTIFACT_NAME }}
          path: dist

      - name: Setup Yak
        run: |
          # Create a directory for yak
          mkdir -p ${{ github.workspace }}/yakfolder

          # Download Linux version of yak
          curl -L "https://files.mcneel.com/yak/tools/0.13.0/linux-x64/yak" -o ${{ github.workspace }}/yakfolder/yak

          # Make it executable
          chmod +x ${{ github.workspace }}/yakfolder/yak

          # Add to path and verify
          echo "${{ github.workspace }}/yakfolder" >> $GITHUB_PATH
          echo "PATH is now: $PATH:${{ github.workspace }}/yakfolder"

      - name: Pack and Push to Yak
        run: |
          cd dist

          export YAK_TOKEN=${{ secrets.YAK_API_KEY }}

          # Build yak package
          yak build

          # List files to verify the .yak file was created
          ls -la

          # Find the .yak package
          # Use -maxdepth 1 to avoid finding .yak files in subdirectories if any
          yakPackageFile=$(find . -maxdepth 1 -name "*.yak" -type f | head -1)

          if [ -z "$yakPackageFile" ]; then
            echo "Error: No .yak package was created in the 'dist' directory."
            exit 1
          fi

          echo "Found package: $yakPackageFile"

          # Get just the filename for the release asset name and GITHUB_ENV
          yakPackageBasename=$(basename "$yakPackageFile")
          echo "YAK_PACKAGE_BASENAME=$yakPackageBasename" >> $GITHUB_ENV
          echo "YAK_PACKAGE_PATH_IN_DIST=$yakPackageFile" >> $GITHUB_ENV # Will be e.g., ./rhinomcp-1.2.3.yak

          # Push to yak server
          yak push "$yakPackageFile"

      - name: Upload .yak package to GitHub Release
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ github.event.release.upload_url }}
          asset_path: dist/${{ env.YAK_PACKAGE_PATH_IN_DIST }} # Path relative to GITHUB_WORKSPACE
          asset_name: ${{ env.YAK_PACKAGE_BASENAME }}
          asset_content_type: application/zip
